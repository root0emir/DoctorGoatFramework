#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Report generation module for DoctorGoatFramework
"""

import os
import sys
import logging
import json
import yaml
from datetime import datetime
from pathlib import Path

logger = logging.getLogger("doctorgoat.report_generator")

class ReportGenerator:
    """Report generation implementation class"""
    
    def __init__(self, results):
        """
        Initialize the report generator module
        
        Args:
            results (dict): Audit, hardening, compliance, and monitoring results
        """
        self.results = results
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    def generate_report(self, output_file=None, format="html"):
        """
        Generate a security report
        
        Args:
            output_file (str, optional): Output file path
            format (str, optional): Report format (html, json, pdf, txt)
            
        Returns:
            str: Path to generated report
        """
        logger.info(f"Generating security report in {format} format")
        
        # Create report directory if it doesn't exist
        report_dir = os.path.dirname(output_file) if output_file else "reports"
        os.makedirs(report_dir, exist_ok=True)
        
        # Generate output file name if not provided
        if not output_file:
            output_file = os.path.join(report_dir, f"security_report_{self.timestamp}.{format}")
        
        try:
            # Generate report based on format
            if format.lower() == "html":
                self._generate_html_report(output_file)
            elif format.lower() == "json":
                self._generate_json_report(output_file)
            elif format.lower() == "pdf":
                self._generate_pdf_report(output_file)
            elif format.lower() == "txt":
                self._generate_txt_report(output_file)
            else:
                logger.warning(f"Unsupported report format: {format}, using JSON instead")
                self._generate_json_report(output_file.replace(f".{format}", ".json"))
                output_file = output_file.replace(f".{format}", ".json")
            
            logger.info(f"Report generated successfully: {output_file}")
            return output_file
            
        except Exception as e:
            logger.error(f"Error generating report: {str(e)}")
            # Fallback to JSON report
            try:
                fallback_file = output_file.replace(f".{format}", ".json")
                self._generate_json_report(fallback_file)
                logger.info(f"Fallback JSON report generated: {fallback_file}")
                return fallback_file
            except Exception as e2:
                logger.error(f"Error generating fallback report: {str(e2)}")
                return None
    
    def _generate_html_report(self, output_file):
        """Generate HTML report"""
        logger.info("Generating HTML report")
        
        # Basic HTML report template
        html_template = """<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Report - DoctorGoatFramework</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; line-height: 1.6; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { border-bottom: 2px solid #333; padding-bottom: 10px; margin-bottom: 20px; }
        .section { margin-bottom: 30px; }
        h1, h2, h3 { margin-top: 0; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th, td { text-align: left; padding: 12px; border-bottom: 1px solid #ddd; }
        th { background-color: #f2f2f2; }
        .critical { color: #721c24; background-color: #f8d7da; }
        .high { color: #e65100; background-color: #fff3e0; }
        .medium { color: #856404; background-color: #fff3cd; }
        .low { color: #0c5460; background-color: #d1ecf1; }
        .info { color: #383d41; background-color: #e2e3e5; }
        .passed { color: #155724; background-color: #d4edda; }
        .summary { display: flex; justify-content: space-between; flex-wrap: wrap; }
        .summary-item { flex: 1; min-width: 250px; margin: 10px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        footer { margin-top: 30px; text-align: center; font-size: 0.8em; color: #777; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Security Assessment Report</h1>
            <p>Generated by DoctorGoatFramework on {timestamp}</p>
        </div>
        
        <div class="section">
            <h2>Executive Summary</h2>
            <div class="summary">
                {summary_items}
            </div>
        </div>
        
        {system_info_section}
        
        {audit_results_section}
        
        {hardening_results_section}
        
        {compliance_results_section}
        
        {monitoring_results_section}
        
        <footer>
            <p>DoctorGoatFramework - Linux Security Audit and Hardening Framework</p>
        </footer>
    </div>
</body>
</html>
"""
        
        # Use very basic templating to fill in the report
        # In a real implementation, use a proper template engine like Jinja2
        
        # Generate summary items
        summary_items = ""
        
        # Add more summary items based on results
        # ... implementation would go here ...
        
        # Generate various sections
        # ... implementation would go here ...
        
        # Write the report to file
        with open(output_file, 'w') as f:
            html_report = html_template.format(
                timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                summary_items="<p>Summary placeholder</p>",
                system_info_section="<h2>System Information</h2><p>System information placeholder</p>",
                audit_results_section="<h2>Security Audit Results</h2><p>Audit results placeholder</p>",
                hardening_results_section="<h2>System Hardening Results</h2><p>Hardening results placeholder</p>",
                compliance_results_section="<h2>Compliance Results</h2><p>Compliance results placeholder</p>",
                monitoring_results_section="<h2>Security Monitoring Results</h2><p>Monitoring results placeholder</p>"
            )
            f.write(html_report)
    
    def _generate_json_report(self, output_file):
        """Generate JSON report"""
        logger.info("Generating JSON report")
        
        # Create JSON report structure
        report = {
            "report_type": "security_assessment",
            "framework": "DoctorGoatFramework",
            "generated_at": datetime.now().isoformat(),
            "results": self.results
        }
        
        # Write the report to file
        with open(output_file, 'w') as f:
            json.dump(report, f, indent=2)
    
    def _generate_pdf_report(self, output_file):
        """Generate PDF report"""
        logger.info("Generating PDF report")
        
        try:
            # Check if we have required libraries
            import weasyprint
        except ImportError:
            logger.warning("weasyprint module not available, falling back to HTML report")
            html_file = output_file.replace(".pdf", ".html")
            self._generate_html_report(html_file)
            raise ImportError("weasyprint module not available for PDF generation")
        
        # Generate HTML first
        html_file = output_file.replace(".pdf", "_temp.html")
        self._generate_html_report(html_file)
        
        # Convert HTML to PDF
        weasyprint.HTML(html_file).write_pdf(output_file)
        
        # Clean up temporary HTML file
        os.remove(html_file)
    
    def _generate_txt_report(self, output_file):
        """Generate plain text report"""
        logger.info("Generating text report")
        
        # Create text report structure
        text_report = f"""
============================================================
SECURITY ASSESSMENT REPORT - DoctorGoatFramework
============================================================
Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

EXECUTIVE SUMMARY
------------------------------------------------------------
"""
        
        # Add more sections based on results
        # ... implementation would go here ...
        
        # Write the report to file
        with open(output_file, 'w') as f:
            f.write(text_report)
